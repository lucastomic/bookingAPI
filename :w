package reservationcontroller

import (
	"net/http"
	"strconv"

	"github.com/gin-gonic/gin"

	"github.com/lucastomic/naturalYSalvajeRent/internals/domain"
	"github.com/lucastomic/naturalYSalvajeRent/internals/exceptions"
	exceptionhandling "github.com/lucastomic/naturalYSalvajeRent/internals/requestHandler/exceptionHandling"
	serviceports "github.com/lucastomic/naturalYSalvajeRent/internals/services/ports"
	"github.com/lucastomic/naturalYSalvajeRent/internals/timeParser"
)

const reservationEndpoint = "reservation"
const addReservationEndpoint = reservationEndpoint
const removeReservationEndpoint = reservationEndpoint + "/:id"

var reservationService = serviceports.NewReservationService()

func AddEndpoints(r *gin.Engine) {
	r.POST(addReservationEndpoint, addReservation)
	r.DELETE(removeReservationEndpoint, removeReservation)
}

// addReservation function creates a new reservation by parsing the request body and validating the data.
// Then, it creates a new reservation and stores it in the database through the reservationService.
// If any error occurs during the process, it returns an error response to the client.
func addReservation(c *gin.Context) {
	var body struct {
		Name        string `json:"name"`
		Phone       string `json:"phone"`
		FirstDay    string `json:"firstDay"`
		LastDay     string `json:"lastDay"`
		BoatId      int    `json:"boatId"`
		StateRoomId int    `json:"stateRoomId"`
	}

	if err := c.Bind(&body); err != nil {
		// TODO: HANDLE ERROR
		return
	}

	firstDay, err := timeParser.ParseFromString(body.FirstDay)
	if err != nil {
		ex := exceptions.NewApiError(http.StatusBadRequest, "Bad firstDay format. Must be a string with yyyy-mm-dd format")
		exceptionhandling.HandleException(c,ex)

		return
	}
	lastDay, err := timeParser.ParseFromString(body.LastDay)
	if err != nil {
		ex := exceptions.NewApiError(http.StatusBadRequest, "Bad lastDay format. Must be a string with yyyy-mm-dd format")
		exceptionhandling.HandleException(c,ex)
		return
	}
	user := domain.NewUser(body.Name, body.Phone)
	reservation := domain.NewReservation(0, user, firstDay, lastDay, body.BoatId, body.StateRoomId)
	err = reservationService.CreateReservation(*reservation)
	if err != nil {
		requesterrors.UnknownError(c, err)
		return
	}

}

// removeReservation function removes a reservation by its id from the database through the reservationService.
// If any error occurs during the process, it returns an error response to the client.
func removeReservation(c *gin.Context) {
	id, err := strconv.Atoi(c.Param("id"))
	if err != nil {
		requesterrors.InvalidParameterType(c, "id")
	}
	reservation, err := reservationService.GetReservation(id)
	if err != nil {
		requesterrors.UnknownError(c, err)
	}

	reservationService.DeleteReservation(reservation)
}
